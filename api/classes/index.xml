<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Classes on libembeddedhal docs</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/</link><description>Recent content in Classes on libembeddedhal docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sjsu-dev2.github.io/libembeddedhal/api/classes/index.xml" rel="self" type="application/rss+xml"/><item><title>embed::adc</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1adc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1adc/</guid><description>Analog to Digital Converter (ADC) hardware abstraction interface.</description></item><item><title>embed::bit_limits</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1bit__limits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1bit__limits/</guid><description>Similar to std::numeric_limits&lt;!-- raw HTML omitted --> except that this object can give properties of integral types of arbitrary bit widths.</description></item><item><title>embed::can</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1can/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1can/</guid><description>Controller Area Network (CAN bus) hardware abstraction interface.</description></item><item><title>embed::can::message_t</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1can_1_1message__t/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1can_1_1message__t/</guid><description>Structure of a CAN message.</description></item><item><title>embed::can::settings</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1can_1_1settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1can_1_1settings/</guid><description>Generic settings for a can peripheral.</description></item><item><title>embed::can_network</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1can__network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1can__network/</guid><description>Manage, store, and organize messages received on the can bus.</description></item><item><title>embed::can_network::node_t</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1can__network_1_1node__t/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1can__network_1_1node__t/</guid><description>A can network node stores the can messages in a lock free way.</description></item><item><title>embed::counter</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1counter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1counter/</guid><description>Counter hardware abstraction interface. Use this interface for devices and peripherals that have counting capabilities. Such devices can count up or down. Useful for keeping time. Expect counters to overflow when they reach the end of counting register&amp;rsquo;s limits.</description></item><item><title>embed::dac</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1dac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1dac/</guid><description>Digital to Analog Converter (DAC) hardware abstraction interface.</description></item><item><title>embed::duty_cycle</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1duty__cycle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1duty__cycle/</guid><description>Structure containing cycle count for the high and low side of a signal duty cycle.</description></item><item><title>embed::error::invalid_option_t</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1error_1_1invalid__option__t/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1error_1_1invalid__option__t/</guid><description>Used for defining static_asserts that should always fail, but only if the static_assert line is hit via if constexpr control block. Prefer to NOT use this directly but to use invalid_option instead.</description></item><item><title>embed::error::invalid_settings</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1error_1_1invalid__settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1error_1_1invalid__settings/</guid><description>Error type indicating that the settings for serial uart could not be set.</description></item><item><title>embed::error::stacktrace</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1error_1_1stacktrace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1error_1_1stacktrace/</guid><description>A structure to hold stack strace source location entries. The size of this class can be changed by changing the embed::config::stacktrace_depth_limit value in the libembeddedhal.tweak.hpp file for your project. This can be used to reduce the stack size of functions that have Boost.LEAF handlers that inspect a embed::error::stacktrace.</description></item><item><title>embed::error::timeout</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1error_1_1timeout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1error_1_1timeout/</guid><description>An error indicating a timeout event.</description></item><item><title>embed::error::universal</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1error_1_1universal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1error_1_1universal/</guid><description>An association error type for all libembeddedhal drivers that inherit from this class. It is used to disambiguate errors coming from a libembeddedhal embed::driver vs those coming from other libraries.</description></item><item><title>embed::frequency</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1frequency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1frequency/</guid><description>Represents the frequency of a signal. It consists of a single integer 64-bit number that presents the integer representation of a signal frequency.</description></item><item><title>embed::i2c</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1i2c/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1i2c/</guid><description>Inter-integrated Circuit (I2C) or Two Wire Interface (TWI) communication protocol hardware abstract interface.</description></item><item><title>embed::i2c::address_not_acknowledged</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1i2c_1_1address__not__acknowledged/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1i2c_1_1address__not__acknowledged/</guid><description>Error type indicating that the i2c transaction resulted in a NACK, meaning &amp;ldquo;not acknowledge&amp;rdquo;. NACKs occur when an address has been placed on the i2c bus and no device connected to the bus returned an acknowledge signal.</description></item><item><title>embed::i2c::bus_error</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1i2c_1_1bus__error/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1i2c_1_1bus__error/</guid><description>Error type indicating that the i2c lines were put into an invalid state during the transaction due to interference, misconfiguration of the i2c peripheral or the addressed device or something else.</description></item><item><title>embed::i2c::settings</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1i2c_1_1settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1i2c_1_1settings/</guid><description>Generic settings for a standard I2C device.</description></item><item><title>embed::input_pin</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1input__pin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1input__pin/</guid><description>Digital input pin hardware abstraction.</description></item><item><title>embed::input_pin::settings</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1input__pin_1_1settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1input__pin_1_1settings/</guid><description>Generic settings for input pins.</description></item><item><title>embed::interrupt_pin</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1interrupt__pin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1interrupt__pin/</guid><description>Digital interrupt pin hardware abstraction.</description></item><item><title>embed::interrupt_pin::settings</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1interrupt__pin_1_1settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1interrupt__pin_1_1settings/</guid><description>Generic settings for interrupt pins.</description></item><item><title>embed::output_pin</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1output__pin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1output__pin/</guid><description>Digital output pin hardware abstraction.</description></item><item><title>embed::output_pin::settings</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1output__pin_1_1settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1output__pin_1_1settings/</guid><description>Generic settings for output pins.</description></item><item><title>embed::overflow_counter</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1overflow__counter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1overflow__counter/</guid><description>Extend a counter&amp;rsquo;s count from an arbitrary bit width to 64-bits by detecting overflows in the count. Each detected overflow is added to an overflow counter which is combined with the current count in order create a count up to 64-bits in length.</description></item><item><title>embed::percent</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1percent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1percent/</guid><description>A integer representation of a precentage.</description></item><item><title>embed::pwm</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1pwm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1pwm/</guid><description>Pulse Width Modulation (PWM) channel hardware abstraction.</description></item><item><title>embed::pwm::settings</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1pwm_1_1settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1pwm_1_1settings/</guid><description>embed::pwm::settings Struct Reference
More&amp;hellip;
#include &amp;lt;pwm.hpp&amp;gt;
Public Attributes Name embed::frequency frequency The target channel PWM frequency. Detailed Description struct embed::pwm::settings; Generic settings for a hardware Pulse Width Modulation (PWM) generating devices devices.
Public Attributes Documentation variable frequency embed::frequency frequency = embed::frequency(1&amp;#39;000); The target channel PWM frequency.
Updated on 2022-02-23 at 18:27:25 +0000</description></item><item><title>embed::serial</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1serial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1serial/</guid><description>Serial communication protocol hardware abstract interface.</description></item><item><title>embed::serial::frame_error</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1serial_1_1frame__error/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1serial_1_1frame__error/</guid><description>Error type indicating that a frame error occurred during reception. This error is returned when calling bytes_available().</description></item><item><title>embed::serial::packets_lost</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1serial_1_1packets__lost/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1serial_1_1packets__lost/</guid><description>Error indicating that packets were lost during reception. This occurs when the buffer is overrun and reaches the end of the circular buffer. This error is returned when calling bytes_available().</description></item><item><title>embed::serial::parity_error</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1serial_1_1parity__error/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1serial_1_1parity__error/</guid><description>Error type indicating that a parity error occurred during reception. This error is returned when calling bytes_available().</description></item><item><title>embed::serial::settings</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1serial_1_1settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1serial_1_1settings/</guid><description>Generic settings for a standard serial device.</description></item><item><title>embed::spi</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1spi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1spi/</guid><description>Serial peripheral interface (SPI) communication protocol hardware abstract interface.</description></item><item><title>embed::spi::settings</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1spi_1_1settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1spi_1_1settings/</guid><description>Generic settings for a standard SPI device.</description></item><item><title>embed::static_callable</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1static__callable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1static__callable/</guid><description>General class which will be used to allow for signature to be used and then split by the below class.</description></item><item><title>embed::static_callable&lt; owner_class, reference_designator, return_t(args_t... p_args)></title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1static__callable_3_01owner__class_00_01reference__designator_00_01return__t_07args__t_8_8_8_01p__args_08_4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1static__callable_3_01owner__class_00_01reference__designator_00_01return__t_07args__t_8_8_8_01p__args_08_4/</guid><description>Specialization of static_callable with the return type and arguments split up.</description></item><item><title>embed::static_memory_resource</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1static__memory__resource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1static__memory__resource/</guid><description>The static_memory_resource is the polymorphic memory resource allocator that allows libembeddedhal&amp;rsquo;s libraries to use a C++ standard container such as std::pmr::vector, std::pmr::string, std::pmr::unordered_map, and more without requiring dynamic memory allocation from the heap. It provides a simple way to create an allocator with built in storage, with its size indicated by a single template parameter. It also provides statistics regarding the amount of memory allocated such that developers can determine if they need to reduce or increase the size of the buffer. Memory statistics can also give programs the insight into how much memory space is available and make decisions based on that. In the event that the memory of the static allocator is exceeded, a std::bad_alloc excpetion is thrown.</description></item><item><title>embed::this_thread::global_clocks</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1this__thread_1_1global__clocks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1this__thread_1_1global__clocks/</guid><description>structure containing internal clock variables and functions</description></item><item><title>embed::timer</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1timer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1timer/</guid><description>Timer hardware abstraction interface.</description></item><item><title>embed::timer::out_of_bounds</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1timer_1_1out__of__bounds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1timer_1_1out__of__bounds/</guid><description>Error type indicating that the desired time delay is not achievable with this timer.</description></item><item><title>embed::uptime_counter</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1uptime__counter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1uptime__counter/</guid><description>uptime counter takes a hardware counter and calculates the uptime in nanoseconds.</description></item></channel></rss>
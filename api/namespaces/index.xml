<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Namespaces on libembeddedhal docs</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/</link><description>Recent content in Namespaces on libembeddedhal docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/index.xml" rel="self" type="application/rss+xml"/><item><title>embed</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed/</guid><description>embed Namespace Reference
Namespaces Name embed::config embed::error embed::literals embed::this_thread Classes Name class embed::adc Analog to Digital Converter (ADC) hardware abstraction interface. struct embed::bit_limits Similar to std::numeric_limitsexcept that this object can give properties of integral types of arbitrary bit widths. struct embed::can_settings Generic settings for a can peripheral.</description></item><item><title>embed::config</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed_1_1config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed_1_1config/</guid><description>embed::config Namespace Reference
Namespaces Name embed::config::defaults Updated on 2022-01-23 at 12:05:49 +0000</description></item><item><title>embed::config::defaults</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed_1_1config_1_1defaults/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed_1_1config_1_1defaults/</guid><description>embed::config::defaults Namespace Reference
Attributes Name constexpr std::string_view platform constexpr bool get_stacktrace_on_error constexpr size_t stacktrace_depth_limit constexpr bool get_source_position_on_error Attributes Documentation variable platform constexpr std::string_view platform = &amp;#34;test&amp;#34;; variable get_stacktrace_on_error constexpr bool get_stacktrace_on_error = true; variable stacktrace_depth_limit constexpr size_t stacktrace_depth_limit = 32; variable get_source_position_on_error constexpr bool get_source_position_on_error = false; Updated on 2022-01-23 at 12:05:49 +0000</description></item><item><title>embed::error</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed_1_1error/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed_1_1error/</guid><description>embed::error Namespace Reference
Classes Name struct embed::error::universal An association error type for all libembeddedhal drivers that inherit from this class. It is used to disambiguate errors coming from a libembeddedhal embed::driver vs those coming from other libraries. class embed::error::stacktrace A structure to hold stack strace source location entries. The size of this class can be changed by changing the embed::config::stacktrace_depth_limit value in the libembeddedhal.</description></item><item><title>embed::literals</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed_1_1literals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed_1_1literals/</guid><description>embed::literals Namespace Reference
Functions Name constexpr frequency operator&amp;quot;&amp;quot;_Hz(unsigned long long p_value)user defined literals for making frequencies: 1337_Hz constexpr frequency operator&amp;quot;&amp;quot;_kHz(unsigned long long p_value)user defined literals for making frequencies in the kilohertz range: 20_kHz constexpr frequency operator&amp;quot;&amp;quot;_MHz(unsigned long long p_value)user defined literals for making frequencies in the megahertz range: 14_MHz Functions Documentation function operator&amp;quot;&amp;quot;_Hz constexpr frequency operator&amp;#34;&amp;#34;_Hz( unsigned long long p_value ) user defined literals for making frequencies: 1337_Hz</description></item><item><title>embed::this_thread</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed_1_1this__thread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed_1_1this__thread/</guid><description>embed::this_thread Namespace Reference
Classes Name struct embed::this_thread::global_clocks structure containing internal clock variables and functions Types Name using std::chrono::nanoseconds time_increment smallest increment of time for clocks using std::function&amp;lt; void(time_increment p_sleep_time)&amp;gt; sleep_function definition of a sleep function using std::function&amp;lt; time_increment(void)&amp;gt; uptime_function definition of an uptime function Functions Name auto sleep_for(time_increment p_delay)Delay execution of the program by a predefined time.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Namespaces on libembeddedhal docs</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/</link><description>Recent content in Namespaces on libembeddedhal docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/index.xml" rel="self" type="application/rss+xml"/><item><title>embed</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed/</guid><description>embed Namespace Reference
Namespaces Name embed::config embed::error embed::literals embed::this_thread Classes Name class embed::adc Analog to Digital Converter (ADC) hardware abstraction interface. struct embed::bit_limits Similar to std::numeric_limitsexcept that this object can give properties of integral types of arbitrary bit widths. class embed::can Controller Area Network (CAN bus) hardware abstraction interface.</description></item><item><title>embed::config</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed_1_1config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed_1_1config/</guid><description>embed::config Namespace Reference
Namespaces Name embed::config::defaults Updated on 2022-04-10 at 12:07:27 +0000</description></item><item><title>embed::config::defaults</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed_1_1config_1_1defaults/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed_1_1config_1_1defaults/</guid><description>embed::config::defaults Namespace Reference
Attributes Name constexpr std::string_view platform constexpr bool get_stacktrace_on_error constexpr size_t stacktrace_depth_limit constexpr bool get_source_position_on_error Attributes Documentation variable platform constexpr std::string_view platform = &amp;#34;test&amp;#34;; variable get_stacktrace_on_error constexpr bool get_stacktrace_on_error = true; variable stacktrace_depth_limit constexpr size_t stacktrace_depth_limit = 32; variable get_source_position_on_error constexpr bool get_source_position_on_error = false; Updated on 2022-04-10 at 12:07:27 +0000</description></item><item><title>embed::error</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed_1_1error/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed_1_1error/</guid><description>embed::error Namespace Reference
Classes Name struct embed::error::invalid_option_t Used for defining static_asserts that should always fail, but only if the static_assert line is hit via if constexpr control block. Prefer to NOT use this directly but to use invalid_option instead. struct embed::error::invalid_settings Error type indicating that the settings for serial uart could not be set. class embed::error::stacktrace A structure to hold stack strace source location entries.</description></item><item><title>embed::literals</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed_1_1literals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed_1_1literals/</guid><description>embed::literals Namespace Reference
Functions Name consteval frequency operator&amp;quot;&amp;quot;_Hz(unsigned long long p_value)user defined literals for making frequencies: 1337_Hz consteval frequency operator&amp;quot;&amp;quot;_kHz(unsigned long long p_value)user defined literals for making frequencies in the kilohertz. consteval frequency operator&amp;quot;&amp;quot;_MHz(unsigned long long p_value)user defined literals for making frequencies in the megahertz. Functions Documentation function operator&amp;quot;&amp;quot;_Hz consteval frequency operator&amp;#34;&amp;#34;_Hz( unsigned long long p_value ) user defined literals for making frequencies: 1337_Hz</description></item><item><title>embed::this_thread</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed_1_1this__thread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/namespaces/namespaceembed_1_1this__thread/</guid><description>embed::this_thread Namespace Reference
Classes Name struct embed::this_thread::global_clocks structure containing internal clock variables and functions Types Name using std::chrono::nanoseconds time_period Smallest increment of time for clocks. using std::function&amp;lt; void(time_period p_sleep_time)&amp;gt; sleep_function Definition of a sleep function. using std::function&amp;lt; time_period(void)&amp;gt; uptime_function Definition of an uptime function. Functions Name void sleep_for(time_period p_delay)Delay execution of the program by a predefined time.</description></item></channel></rss>